@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData


<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>The categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>The statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>





@code {

    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Bobe",
                LastName = "Testing",
                EmailAddress = "bobe@test.edu",
                DisplayName = "Bobe",
                ObjectIdentifier = "1a2b3c4d"
            };

        await userData.CreateUser(user);

        var foundUser = await userData.GetUserByAuth("1a2b3c4d");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");



        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "First test suggestion",
                Description = "This is the first test suggestion"
            };

        await suggestionData.CreateSuggestion(suggestion);

        //suggestion = new()
        //    {
        //        Author = new BasicUserModel(foundUser),
        //        Category = categories[1],
        //        Suggestion = "2nd test suggestion",
        //        Description = "This is the second test suggestion",
        //        SuggestionStatus = statuses[0],
        //        OwnerNotes = "These are some arbitrary notes"
        //    };

        //await suggestionData.CreateSuggestion(suggestion);

        //suggestion = new()
        //    {
        //        Author = new BasicUserModel(foundUser),
        //        Category = categories[2],
        //        Suggestion = "3rd test suggestion",
        //        Description = "This is the third test suggestion",
        //        SuggestionStatus = statuses[1],
        //        OwnerNotes = "These are some arbitrary notes"
        //    };

        //await suggestionData.CreateSuggestion(suggestion);

        //suggestion = new()
        //    {
        //        Author = new BasicUserModel(foundUser),
        //        Category = categories[3],
        //        Suggestion = "4th test suggestion",
        //        Description = "This is the fourth test suggestion",
        //        SuggestionStatus = statuses[2],
        //        OwnerNotes = "These are some arbitrary notes",
        //        UserVotes = votes
        //    };

        //await suggestionData.CreateSuggestion(suggestion);

        //votes.Add("4");

        //suggestion = new()
        //    {
        //        Author = new BasicUserModel(foundUser),
        //        Category = categories[4],
        //        Suggestion = "5th test suggestion",
        //        Description = "This is the fifth test suggestion",
        //        SuggestionStatus = statuses[3],
        //        UserVotes = votes,
        //        OwnerNotes = "These are some arbitrary notes"
        //    };

        //await suggestionData.CreateSuggestion(suggestion);

    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();
        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Full Paid Courses"
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advice on being dev"
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In-Depth Tutorial",
                CategoryDescription = "Deep dives on a topic"

            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10-Minute Training",
                CategoryDescription = "A quick \"How to use this?\' video."
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "n/a"
            };

        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel status = new()
            {
                StsatusName = "Completed",
                StatusDescription = "y variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't a"
            };

        await statusData.CreateStatus(status);

        status = new()
            {
                StsatusName = "Watching",
                StatusDescription = "y variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't a"
            };

        await statusData.CreateStatus(status);

        status = new()
            {
                StsatusName = "Upcoming",
                StatusDescription = "y variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't a"
            };

        await statusData.CreateStatus(status);

        status = new()
            {
                StsatusName = "Dismissed",
                StatusDescription = "y variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't a"
            };

        await statusData.CreateStatus(status);

        statusesCreated = true;
    }
}
